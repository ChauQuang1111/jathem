// 101. Symmetric Tree

import java.util.*;

public class b10 {
    static Scanner sc = new Scanner(System.in);

    public static void main(String[] args) {
        int n = sc.nextInt();

        System.out.println("Nh·∫≠p c√°c gi√° tr·ªã node theo th·ª© t·ª± level order:");
        Integer[] arr = new Integer[n];
        for (int i = 0; i < n; i++) {
            int val = sc.nextInt();
            arr[i] = val; // kh√¥ng c√≥ null ·ªü ƒë√¢y ƒë·ªÉ ƒë∆°n gi·∫£n
        }

        // X√¢y c√¢y t·ª´ m·∫£ng level order
        TreeNode root = buildTree(arr);

        // Ki·ªÉm tra ƒë·ªëi x·ª©ng

        boolean result = isSymmetric(root);

        System.out.println(result ? "C√¢y ƒë·ªëi x·ª©ng" : "C√¢y kh√¥ng ƒë·ªëi x·ª©ng");
    }

    // X√¢y c√¢y nh·ªã ph√¢n t·ª´ m·∫£ng level order
    public static TreeNode buildTree(Integer[] arr) {
        if (arr.length == 0 || arr[0] == null)
            return null;

        TreeNode root = new TreeNode(arr[0]);
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        int i = 1;

        while (!q.isEmpty() && i < arr.length) {
            TreeNode node = q.poll();

            // th√™m nh√°nh tr√°i
            if (i < arr.length && arr[i] != null) {
                node.left = new TreeNode(arr[i]);
                q.add(node.left);
            }
            i++;

            // th√™m nh√°nh ph·∫£i
            if (i < arr.length && arr[i] != null) {
                node.right = new TreeNode(arr[i]);
                q.add(node.right);
            }
            i++;
        }
        return root;
    }

    static class TreeNode {
        int val;
        TreeNode left, right;

        TreeNode(int val) {
            this.val = val;
        }
    }

    public static boolean isSymmetric(TreeNode root) {
        if (root == null)
            return true;
        return isMirror(root.left, root.right);
    }

    // H√†m ki·ªÉm tra 2 nh√°nh c√≥ l√† ·∫£nh g∆∞∆°ng c·ªßa nhau kh√¥ng
    public static boolean isMirror(TreeNode t1, TreeNode t2) {
        if (t1 == null && t2 == null)
            return true; // c·∫£ 2 ƒë·ªÅu r·ªóng ‚Üí ƒë·ªëi x·ª©ng
        if (t1 == null || t2 == null)
            return false; // 1 b√™n null ‚Üí kh√¥ng ƒë·ªëi x·ª©ng

        // ki·ªÉm tra gi√° tr·ªã v√† 2 c·∫∑p nh√°nh con
        return (t1.val == t2.val)
                && isMirror(t1.left, t2.right)
                && isMirror(t1.right, t2.left);
    }
}

// T·∫•t nhi√™n üëá ‚Äî m√¨nh s·∫Ω **gi·∫£i th√≠ch chi ti·∫øt thu·∫≠t to√°n ‚ÄúSymmetric Tree‚Äù**
// (B√†i LeetCode 101) k√®m v√≠ d·ª• minh h·ªça r√µ r√†ng.

// ---

// ## üß© ƒê·ªÅ b√†i

// Cho g·ªëc c·ªßa m·ªôt **c√¢y nh·ªã ph√¢n**, h√£y ki·ªÉm tra xem **c√¢y c√≥ ƒë·ªëi x·ª©ng
// (symmetrical)** quanh tr·ª•c d·ªçc ƒëi qua g·ªëc hay kh√¥ng.

// N√≥i c√°ch kh√°c, c√¢y ƒë√≥ c√≥ ph·∫£i l√† **·∫£nh g∆∞∆°ng c·ªßa ch√≠nh n√≥** kh√¥ng?

// ---

// ## üí° √ù t∆∞·ªüng ch√≠nh

// C√¢y ƒë·ªëi x·ª©ng khi:

// * Hai nh√°nh tr√°i v√† ph·∫£i c·ªßa g·ªëc l√† **·∫£nh g∆∞∆°ng** c·ªßa nhau.
// * Nghƒ©a l√†:

// * Gi√° tr·ªã n√∫t tr√°i v√† ph·∫£i **b·∫±ng nhau**
// * Nh√°nh **tr√°i c·ªßa c√¢y b√™n tr√°i** ph·∫£i ƒë·ªëi x·ª©ng v·ªõi **nh√°nh ph·∫£i c·ªßa c√¢y b√™n
// ph·∫£i**,
// * v√† ng∆∞·ª£c l·∫°i.

// ---

// ## üîÅ Thu·∫≠t to√°n ƒë·ªá quy

// Ta vi·∫øt m·ªôt h√†m ph·ª• `isMirror(TreeNode t1, TreeNode t2)` ƒë·ªÉ ki·ªÉm tra xem hai
// c√¢y c√≥ l√† ·∫£nh g∆∞∆°ng c·ªßa nhau hay kh√¥ng.

// ### B∆∞·ªõc ki·ªÉm tra:

// 1. **C·∫£ hai c√πng null** ‚Üí ‚úÖ ƒê·ªëi x·ª©ng
// (v√¨ c·∫£ hai ƒë·ªÅu kh√¥ng c√≥ g√¨)

// 2. **M·ªôt trong hai null** ‚Üí ‚ùå Kh√¥ng ƒë·ªëi x·ª©ng
// (m·ªôt b√™n c√≥ nh√°nh, b√™n kia kh√¥ng c√≥)

// 3. **Gi√° tr·ªã kh√¥ng b·∫±ng nhau** ‚Üí ‚ùå Kh√¥ng ƒë·ªëi x·ª©ng

// 4. N·∫øu c√°c ƒëi·ªÅu ki·ªán tr√™n ƒë·ªÅu qua, ta ti·∫øp t·ª•c ki·ªÉm tra **2 c·∫∑p con t∆∞∆°ng
// ·ª©ng**:

// * `t1.left` ‚Üî `t2.right`
// * `t1.right` ‚Üî `t2.left`

// N·∫øu t·∫•t c·∫£ c√°c c·∫∑p ƒë·ªÅu ƒë√∫ng ‚Üí c√¢y ƒë·ªëi x·ª©ng.

// ---

// ## üß† ƒê·ªô ph·ª©c t·∫°p

// * **Th·ªùi gian:** `O(n)` ‚Äî ta duy·ªát t·∫•t c·∫£ c√°c n√∫t trong c√¢y ƒë√∫ng m·ªôt l·∫ßn.
// * **Kh√¥ng gian:** `O(h)` ‚Äî do ƒë·ªá quy (h l√† chi·ªÅu cao c√¢y).

// ---

// ## üßÆ V√≠ d·ª• minh h·ªça

// ### Input:

// ```
// 1
// / \
// 2 2
// / \ / \
// 3 4 4 3
// ```

// ### So s√°nh t·ª´ng c·∫∑p:

// 1. `1 ‚Üî 1` ‚úÖ
// 2. `2(left) ‚Üî 2(right)` ‚úÖ
// 3. So s√°nh:

// * `3 ‚Üî 3` ‚úÖ
// * `4 ‚Üî 4` ‚úÖ

// M·ªçi c·∫∑p t∆∞∆°ng ·ª©ng ƒë·ªÅu b·∫±ng nhau ‚Üí **c√¢y ƒë·ªëi x·ª©ng** ‚úÖ

// ---

// ### Tr∆∞·ªùng h·ª£p **kh√¥ng ƒë·ªëi x·ª©ng:**

// ```
// 1
// / \
// 2 2
// \ \
// 3 3
// ```

// So s√°nh:

// * `1 ‚Üî 1` ‚úÖ
// * `2(left) ‚Üî 2(right)` ‚úÖ
// * Nh∆∞ng:

// * `left.left = null`
// * `right.right = 3`
// ‚Üí ‚ùå Kh√¥ng ƒë·ªëi x·ª©ng

// ---

// ## ‚úÖ T√≥m t·∫Øt

// | ƒêi·ªÅu ki·ªán ki·ªÉm tra | K·∫øt lu·∫≠n | | |
// | -------------------------- |
// ---------------------------------------------------- | ----------- |
// -------------- |
// | `t1 == null && t2 == null` | ƒê·ªëi x·ª©ng | | |
// | `t1 == null | | t2 == null` | Kh√¥ng ƒë·ªëi x·ª©ng |
// | `t1.val != t2.val` | Kh√¥ng ƒë·ªëi x·ª©ng | | |
// | C√≤n l·∫°i | So s√°nh `t1.left ‚Üî t2.right` v√† `t1.right ‚Üî t2.left` | | |

// ---

// B·∫°n c√≥ mu·ªën m√¨nh v·∫Ω **s∆° ƒë·ªì minh h·ªça d·∫°ng ·∫£nh g∆∞∆°ng** ƒë·ªÉ tr·ª±c quan h√≥a qu√°
// tr√¨nh ƒë·ªá quy kh√¥ng?
