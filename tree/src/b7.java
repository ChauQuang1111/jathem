
// Range Sum Query Mutable
import java.util.*;

class b7 {

    /**
     * NumArray using Fenwick Tree (Binary Indexed Tree)
     * - update: O(log n)
     * - sumRange: O(log n)
     */
    public static class NumArray {
        public int[] nums; // l∆∞u gi√° tr·ªã g·ªëc
        public int[] bit; // m·∫£ng Fenwick (1-based)
        public int n;

        // Constructor: kh·ªüi t·∫°o NumArray v√† Fenwick Tree t·ª´ m·∫£ng ban ƒë·∫ßu
        public NumArray(int[] nums) {
            this.n = nums.length;
            this.nums = new int[n];
            this.bit = new int[n + 1]; // 1-based indexing cho Fenwick Tree

            // copy d·ªØ li·ªáu v√†o nums v√† kh·ªüi t·∫°o bit b·∫±ng c√°ch add t·ª´ng ph·∫ßn t·ª≠
            for (int i = 0; i < n; i++) {
                this.nums[i] = nums[i];
                add(i, nums[i]); // th√™m nums[i] v√†o BIT t·∫°i v·ªã tr√≠ i
            }
        }

        /**
         * C·∫≠p nh·∫≠t nums[index] = val
         * 
         * @param index v·ªã tr√≠ c·∫ßn c·∫≠p nh·∫≠t (0-based)
         * @param val   gi√° tr·ªã m·ªõi
         */
        public void update(int index, int val) {
            if (index < 0 || index >= n)
                return;
            int delta = val - nums[index]; // hi·ªáu ch·ªânh c·∫ßn th√™m v√†o BIT
            nums[index] = val; // c·∫≠p nh·∫≠t m·∫£ng g·ªëc
            add(index, delta); // c·∫≠p nh·∫≠t Fenwick Tree
        }

        /**
         * T√≠nh t·ªïng t·ª´ left -> right (bao g·ªìm c·∫£ hai ƒë·∫ßu)
         * 
         * @param left  ch·ªâ s·ªë tr√°i (0-based)
         * @param right ch·ªâ s·ªë ph·∫£i (0-based)
         * @return t·ªïng c√°c ph·∫ßn t·ª≠ trong ƒëo·∫°n [left, right]
         */
        public int sumRange(int left, int right) {
            if (left < 0)
                left = 0;
            if (right >= n)
                right = n - 1;
            if (left > right)
                return 0;
            return prefixSum(right) - prefixSum(left - 1);
        }

        // -------- Fenwick Tree helper methods --------

        // Th√™m delta v√†o v·ªã tr√≠ index (0-based). Fenwick d√πng index 1-based.
        private void add(int index, int delta) {
            index++; // chuy·ªÉn sang 1-based
            while (index <= n) {
                bit[index] += delta;
                index += index & -index; // ƒëi t·ªõi node cha
            }
        }

        // T√≠nh t·ªïng prefix t·ª´ 0 -> index (0-based). N·∫øu index < 0 tr·∫£ 0.
        public int prefixSum(int index) {
            if (index < 0)
                return 0;
            int sum = 0;
            index++; // chuy·ªÉn sang 1-based
            while (index > 0) {
                sum += bit[index];
                index -= index & -index; // chuy·ªÉn t·ªõi node th·∫•p h∆°n
            }
            return sum;
        }

        static Scanner sc = new Scanner(System.in);

        public static void main(String[] args) {

            // ƒê·ªçc n
            int n = sc.nextInt();
            int[] arr = new int[n];
            // ƒê·ªçc m·∫£ng nums
            for (int i = 0; i < n; i++) {
                arr[i] = sc.nextInt();
            }

            // Kh·ªüi t·∫°o NumArray
            NumArray numArray = new NumArray(arr);

            // ƒê·ªçc s·ªë truy v·∫•n q
            int q = sc.nextInt();
            sc.nextLine(); // ƒë·ªçc newline c√≤n d∆∞

            // X·ª≠ l√Ω t·ª´ng truy v·∫•n
            for (int i = 0; i < q; i++) {
                String line = sc.nextLine().trim();
                if (line.length() == 0) {
                    i--;
                    continue;
                }
                String[] parts = line.split("\\s+");
                String cmd = parts[0];

                if (cmd.equalsIgnoreCase("update")) {
                    // format: update index val
                    int idx = Integer.parseInt(parts[1]);
                    int val = Integer.parseInt(parts[2]);
                    numArray.update(idx, val);
                    // In ra null t∆∞∆°ng t·ª± LeetCode (t√πy ch·ªçn)
                    System.out.println("null");
                } else if (cmd.equalsIgnoreCase("sum")) {
                    // format: sum left right
                    int left = Integer.parseInt(parts[1]);
                    int right = Integer.parseInt(parts[2]);
                    int res = numArray.sumRange(left, right);
                    System.out.println(res);
                } else {
                    // n·∫øu l·ªánh kh√¥ng h·ª£p l·ªá
                    System.out.println("Unknown command: " + cmd);
                }
            }

            sc.close();
        }
    }

}

// ---

// ## üìå ƒê·ªÅ b√†i

// B·∫°n ƒë∆∞·ª£c cho m·ªôt **m·∫£ng s·ªë nguy√™n `nums`**, v√† c·∫ßn h·ªó tr·ª£ 2 lo·∫°i thao t√°c:

// 1. **update(index, val)**

// * C·∫≠p nh·∫≠t gi√° tr·ªã c·ªßa ph·∫ßn t·ª≠ t·∫°i v·ªã tr√≠ `index` th√†nh `val`.

// 2. **sumRange(left, right)**

// * Tr·∫£ v·ªÅ t·ªïng c√°c ph·∫ßn t·ª≠ trong kho·∫£ng `[left, right]`.

// üëâ Kh√°c v·ªõi b√†i **303. Range Sum Query ‚Äì Immutable** (kh√¥ng cho update), ·ªü
// b√†i n√†y m·∫£ng c√≥ th·ªÉ thay ƒë·ªïi n√™n ph·∫£i c√≥ c·∫•u tr√∫c d·ªØ li·ªáu hi·ªáu qu·∫£ ƒë·ªÉ h·ªó tr·ª£
// c·∫£ update l·∫´n sum.

// ---

// ## üìå V√≠ d·ª•

// Input:

// ```
// ["NumArray", "sumRange", "update", "sumRange"]
// [[[1,3,5]], [0,2], [1,2], [0,2]]
// ```

// Gi·∫£i th√≠ch:

// * `NumArray([1,3,5])` ‚Üí kh·ªüi t·∫°o m·∫£ng `[1,3,5]`.
// * `sumRange(0,2)` ‚Üí 1+3+5 = 9.
// * `update(1,2)` ‚Üí m·∫£ng th√†nh `[1,2,5]`.
// * `sumRange(0,2)` ‚Üí 1+2+5 = 8.

// Output:

// ```
// [null, 9, null, 8]
// ```

// ---

// ## üìå R√†ng bu·ªôc

// * `1 <= nums.length <= 3 * 10^4`
// * `-100 <= nums[i] <= 100`
// * `0 <= index < nums.length`
// * C√≥ th·ªÉ c√≥ **10^4 thao t√°c** update ho·∫∑c sumRange.

// üëâ N·∫øu d√πng c√°ch c·ªông d·ªìn ƒë∆°n gi·∫£n (m·ªói l·∫ßn sumRange duy·ªát t·ª´ `left ‚Üí right`)
// ‚Üí O(n) cho m·ªói query ‚Üí qu√° ch·∫≠m.

// ---

// ## üìå H∆∞·ªõng ti·∫øp c·∫≠n

// Ta c·∫ßn c·∫•u tr√∫c d·ªØ li·ªáu h·ªó tr·ª£:

// * **Update 1 ph·∫ßn t·ª≠** nhanh.
// * **T√≠nh t·ªïng tr√™n ƒëo·∫°n [L, R]** nhanh.

// C√°c c√°ch:

// 1. **Fenwick Tree (Binary Indexed Tree ‚Äì BIT)**

// * Update: O(log n).
// * Query prefix sum: O(log n).
// * sumRange(L, R) = prefix(R) - prefix(L-1).

// 2. **Segment Tree**

// * Update: O(log n).
// * Query sumRange: O(log n).

// üëâ C·∫£ 2 ƒë·ªÅu ph√π h·ª£p. BIT c√†i ng·∫Øn g·ªçn h∆°n, Segment Tree d·ªÖ m·ªü r·ªông cho c√°c
// lo·∫°i query kh√°c.

// ---

// üìå T√≥m l·∫°i:

// * ƒê√¢y l√† b√†i to√°n ƒëi·ªÉn h√¨nh v·ªÅ **c·∫•u tr√∫c d·ªØ li·ªáu cho Range Query + Update**.
// * Gi·∫£i b·∫±ng **Fenwick Tree ho·∫∑c Segment Tree** ƒë·ªÉ ƒë·∫°t hi·ªáu qu·∫£.

// ---

// B·∫°n mu·ªën m√¨nh vi·∫øt code **Fenwick Tree (ng·∫Øn g·ªçn)** hay **Segment Tree (d·ªÖ
// hi·ªÉu h∆°n)** cho b√†i n√†y?

// ---

// ### **ƒê·ªÅ b√†i**

// B·∫°n c√≥ m·ªôt m·∫£ng s·ªë nguy√™n `nums`. Y√™u c·∫ßu h·ªó tr·ª£ hai lo·∫°i thao t√°c:

// 1. `update(index, val)` ‚Üí C·∫≠p nh·∫≠t gi√° tr·ªã t·∫°i `nums[index] = val`.
// 2. `sumRange(left, right)` ‚Üí T√≠nh t·ªïng ph·∫ßn t·ª≠ t·ª´ `nums[left]` ƒë·∫øn
// `nums[right]` (bao g·ªìm c·∫£ 2 ƒë·∫ßu).

// M·ª•c ti√™u: C·∫£ hai thao t√°c ph·∫£i ƒë∆∞·ª£c th·ª±c hi·ªán **nhanh h∆°n O(n)** (t·ªët nh·∫•t l√†
// O(log n)).

// ---

// ### **Gi·∫£i ph√°p c∆° b·∫£n (Brute force)**

// * `update`: O(1) (ch·ªâ c·∫ßn thay s·ªë).
// * `sumRange`: O(n) (t√≠nh l·∫°i t·ªïng t·ª´ left ‚Üí right).
// ‚ùå Nh∆∞ng n·∫øu c√≥ **nhi·ªÅu truy v·∫•n**, c√°ch n√†y s·∫Ω qu√° ch·∫≠m.

// ---

// ### **Gi·∫£i ph√°p t·ªëi ∆∞u**

// Ta c·∫ßn m·ªôt c·∫•u tr√∫c d·ªØ li·ªáu cho ph√©p:

// * C·∫≠p nh·∫≠t nhanh.
// * T√≠nh t·ªïng nhanh.

// Hai c√°ch ph·ªï bi·∫øn:

// #### **1. Fenwick Tree (Binary Indexed Tree - BIT)**

// * L∆∞u m·∫£ng ph·ª• `bit[]`, trong ƒë√≥ m·ªói ph·∫ßn t·ª≠ qu·∫£n l√Ω t·ªïng m·ªôt ƒëo·∫°n con.
// * `update`: O(log n).
// * `sumRange`: O(log n).

// #### **2. Segment Tree**

// * Chia m·∫£ng th√†nh c√°c ƒëo·∫°n [left, right], m·ªói node qu·∫£n l√Ω t·ªïng c·ªßa ƒëo·∫°n ƒë√≥.
// * `update`: O(log n).
// * `sumRange`: O(log n).

// ---

// ### **√ù t∆∞·ªüng Segment Tree (tr·ª±c quan h∆°n)**

// 1. X√¢y d·ª±ng c√¢y ph√¢n ƒëo·∫°n t·ª´ m·∫£ng `nums`.

// * Node g·ªëc qu·∫£n l√Ω to√†n b·ªô m·∫£ng.
// * Node con tr√°i qu·∫£n l√Ω n·ª≠a tr√°i, node con ph·∫£i qu·∫£n l√Ω n·ª≠a ph·∫£i.
// * M·ªói node l∆∞u t·ªïng ƒëo·∫°n n√≥ qu·∫£n l√Ω.
// 2. Khi `update(index, val)` ‚Üí ƒëi t·ª´ g·ªëc xu·ªëng l√°, c·∫≠p nh·∫≠t l·∫°i t·ªïng tr√™n
// ƒë∆∞·ªùng ƒëi.
// 3. Khi `sumRange(left, right)` ‚Üí duy·ªát c√¢y, l·∫•y t·ªïng t·ª´ c√°c ƒëo·∫°n ph√π h·ª£p.

// ---

// ### **ƒê·ªô ph·ª©c t·∫°p**

// * **X√¢y d·ª±ng c√¢y**: O(n).
// * **update**: O(log n).
// * **sumRange**: O(log n).

// ---

// üëâ T√≥m l·∫°i: ƒê·ªÉ gi·∫£i b√†i n√†y ta th∆∞·ªùng d√πng **Segment Tree** ho·∫∑c **Fenwick
// Tree** ƒë·ªÉ ƒë·∫£m b·∫£o update v√† query ƒë·ªÅu nhanh.

// ---

// B·∫°n c√≥ mu·ªën m√¨nh vi·∫øt lu√¥n code m·∫´u b·∫±ng **Segment Tree** ƒë·ªÉ b·∫°n d·ªÖ hi·ªÉu h∆°n
// kh√¥ng?
