
// 23. Merge k Sorted Lists
import java.util.*;

public class b8 {
    static class ListNode {
        int val;
        ListNode next;

        ListNode() {
        }

        ListNode(int val) {
            this.val = val;
        }

        ListNode(int val, ListNode next) {
            this.val = val;
            this.next = next;
        }
    }

    // H√†m ch√≠nh g·ªôp k danh s√°ch ƒë√£ s·∫Øp x·∫øp
    public static ListNode mergeKLists(ListNode[] lists) {
        if (lists.length == 0)
            return null; // N·∫øu kh√¥ng c√≥ danh s√°ch n√†o th√¨ tr·∫£ v·ªÅ null

        int max = Integer.MIN_VALUE;
        int min = Integer.MAX_VALUE;

        // 1. T√¨m gi√° tr·ªã nh·ªè nh·∫•t v√† l·ªõn nh·∫•t trong t·∫•t c·∫£ c√°c danh s√°ch
        for (ListNode nodeRow : lists) {
            for (ListNode head = nodeRow; head != null; head = head.next) {
                min = Math.min(min, head.val);
                max = Math.max(max, head.val);
            }
        }

        // D·ªãch min v·ªÅ 0 ƒë·ªÉ tr√°nh s·ªë √¢m trong m·∫£ng
        min = Math.abs(min);
        int freq[] = new int[max + min + 1];

        // 2. ƒê·∫øm t·∫ßn su·∫•t xu·∫•t hi·ªán c·ªßa t·ª´ng gi√° tr·ªã
        for (ListNode nodeRow : lists) {
            for (ListNode head = nodeRow; head != null; head = head.next) {
                freq[head.val + min]++;
            }
        }

        // 3. X√¢y d·ª±ng danh s√°ch k·∫øt qu·∫£ t·ª´ m·∫£ng t·∫ßn su·∫•t
        ListNode dummy = new ListNode(-1);
        ListNode temp = dummy;

        for (int i = 0; i < freq.length; i++) {
            if (freq[i] > 0) {
                int val = i - min; // Tr·∫£ v·ªÅ gi√° tr·ªã ban ƒë·∫ßu
                while (freq[i]-- > 0) { // V·ªõi m·ªói l·∫ßn xu·∫•t hi·ªán, t·∫°o node m·ªõi
                    temp.next = new ListNode(val);
                    temp = temp.next;
                }
            }
        }

        return dummy.next; // Tr·∫£ v·ªÅ danh s√°ch ƒë√£ g·ªôp
    }

    // H√†m main ƒë·ªÉ nh·∫≠p d·ªØ li·ªáu b·∫±ng Scanner
    static Scanner sc = new Scanner(System.in);

    public static void main(String[] args) {

        // Nh·∫≠p s·ªë l∆∞·ª£ng danh s√°ch k
        int k = sc.nextInt();
        ListNode[] lists = new ListNode[k];

        // Nh·∫≠p t·ª´ng danh s√°ch
        for (int i = 0; i < k; i++) {
            int n = sc.nextInt(); // s·ªë ph·∫ßn t·ª≠ trong danh s√°ch th·ª© i
            ListNode dummy = new ListNode(-1);
            ListNode tail = dummy;

            for (int j = 0; j < n; j++) {
                int val = sc.nextInt();
                tail.next = new ListNode(val);
                tail = tail.next;
            }

            lists[i] = dummy.next; // g√°n danh s√°ch ƒë√£ nh·∫≠p v√†o m·∫£ng
        }

        // G·ªçi h√†m mergeKLists
        ListNode result = mergeKLists(lists);

        // In k·∫øt qu·∫£
        while (result != null) {
            System.out.print(result.val + " ");
            result = result.next;
        }
    }
}

// R·ªìi üëç m√¨nh s·∫Ω gi·∫£i th√≠ch chi ti·∫øt thu·∫≠t to√°n m√† ƒëo·∫°n code b·∫°n ƒë∆∞a ra ƒëang
// l√†m nh√©.

// ---

// ## üìå √ù t∆∞·ªüng ch√≠nh c·ªßa code

// Code n√†y **kh√¥ng d√πng heap hay merge tr·ª±c ti·∫øp** m√† s·ª≠ d·ª•ng **Counting Sort**
// (ƒë·∫øm t·∫ßn su·∫•t).
// C√°ch l√†m nh∆∞ sau:

// 1. **T√¨m min v√† max value trong t·∫•t c·∫£ c√°c linked list**

// * Duy·ªát qua t·∫•t c·∫£ `lists` ƒë·ªÉ x√°c ƒë·ªãnh gi√° tr·ªã nh·ªè nh·∫•t (`min`) v√† l·ªõn nh·∫•t
// (`max`).
// * M·ª•c ƒë√≠ch: bi·∫øt kho·∫£ng gi√° tr·ªã c√°c node ƒë·ªÉ t·∫°o m·∫£ng `freq`.

// 2. **T·∫°o m·∫£ng t·∫ßn su·∫•t `freq`**

// * `freq[val + min]` l∆∞u s·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa `val`.
// * L√Ω do c√≥ `+min`: ƒë·ªÉ d·ªãch gi√° tr·ªã v·ªÅ ch·ªâ s·ªë d∆∞∆°ng (n·∫øu c√≥ s·ªë √¢m).

// 3. **Duy·ªát l·∫°i to√†n b·ªô danh s√°ch v√† tƒÉng t·∫ßn su·∫•t**

// * M·ªói l·∫ßn g·∫∑p m·ªôt node c√≥ gi√° tr·ªã `head.val`, tƒÉng `freq[head.val + min]++`.

// 4. **X√¢y d·ª±ng l·∫°i linked list ƒë√£ s·∫Øp x·∫øp**

// * Duy·ªát qua `freq` t·ª´ nh·ªè ƒë·∫øn l·ªõn.
// * V·ªõi m·ªói `i` (·ª©ng v·ªõi gi√° tr·ªã `i - min`), n·∫øu `freq[i] > 0`, t·∫°o b·∫•y nhi√™u
// node n·ªëi v√†o k·∫øt qu·∫£.

// ---

// ## üìå Ch√∫ th√≠ch code

// ```java
// if(lists.length == 0) return null;

// int max = Integer.MIN_VALUE;
// int min = Integer.MAX_VALUE;

// // 1. T√¨m min v√† max
// for (ListNode nodeRow : lists) {
// for(ListNode head = nodeRow; head != null; head = head.next) {
// min = Math.min(min, head.val);
// max = Math.max(max, head.val);
// }
// }

// min = Math.abs(min); // d·ªãch gi√° tr·ªã ƒë·ªÉ tr√°nh index √¢m
// int freq[] = new int[max + min + 1];

// // 2. ƒê·∫øm t·∫ßn su·∫•t
// for (ListNode nodeRow : lists) {
// for(ListNode head = nodeRow; head != null; head = head.next) {
// freq[head.val + min]++;
// }
// }

// // 3. T·∫°o l·∫°i linked list t·ª´ freq
// ListNode dummy = new ListNode(-1);
// ListNode temp = dummy;

// for (int i = 0; i < freq.length; i++) {
// if (freq[i] > 0) {
// int val = i - min; // kh√¥i ph·ª•c l·∫°i gi√° tr·ªã th·∫≠t
// while (freq[i]-- > 0) {
// temp.next = new ListNode(val);
// temp = temp.next;
// }
// }
// }

// return dummy.next;
// ```

// ---

// ## üìå ƒê·ªô ph·ª©c t·∫°p

// * Duy·ªát to√†n b·ªô node 2 l·∫ßn ‚Üí `O(N)` v·ªõi `N` = t·ªïng s·ªë node.
// * X√¢y d·ª±ng k·∫øt qu·∫£ b·∫±ng m·∫£ng `freq` k√≠ch th∆∞·ªõc `max - min + 1`.

// üëâ **ƒê·ªô ph·ª©c t·∫°p th·ªùi gian:**

// * Trung b√¨nh t·ªët: `O(N + R)` v·ªõi `R = max - min`.
// * N·∫øu gi√° tr·ªã node r·∫•t l·ªõn (v√≠ d·ª• `[-10^9, 10^9]`) th√¨ `freq` c·ª±c k·ª≥ to ‚Üí t·ªën
// b·ªô nh·ªõ.

// üëâ **ƒê·ªô ph·ª©c t·∫°p kh√¥ng gian:** `O(max - min)` (c√≥ th·ªÉ r·∫•t l·ªõn, d·ªÖ b·ªã Memory
// Limit Exceeded).

// ---

// ## üìå Nh·∫≠n x√©t

// * ∆Øu ƒëi·ªÉm: √Ω t∆∞·ªüng ƒë·ªôc ƒë√°o, d·ªÖ hi·ªÉu, ƒë·ªô ph·ª©c t·∫°p tuy·∫øn t√≠nh v·ªõi d·∫£i gi√° tr·ªã
// nh·ªè.
// * Nh∆∞·ª£c ƒëi·ªÉm: n·∫øu gi√° tr·ªã node n·∫±m trong kho·∫£ng r·ªông (big range), m·∫£ng `freq`
// s·∫Ω r·∫•t l·ªõn ‚Üí **kh√¥ng th·ª±c t·∫ø cho input l·ªõn**.
// * V√¨ th·∫ø LeetCode th∆∞·ªùng khuy·∫øn kh√≠ch d√πng **PriorityQueue** ho·∫∑c **Divide &
// Conquer** thay v√¨ counting sort.

// ---

// üëâ B·∫°n c√≥ mu·ªën m√¨nh vi·∫øt m·ªôt **v√≠ d·ª• c·ª• th·ªÉ** (lists =
// [[1,4,5],[1,3,4],[2,6]]) ƒë·ªÉ m√¥ ph·ªèng c√°ch m·∫£ng `freq` ƒë∆∞·ª£c t·∫°o v√† sau ƒë√≥
// linked list ƒë∆∞·ª£c x√¢y d·ª±ng l·∫°i kh√¥ng?

// Ok m√¨nh gi·∫£i th√≠ch b√†i **LeetCode 23 ‚Äì Merge k Sorted Lists** nh√© üëá

// ---

// ### üìù ƒê·ªÅ b√†i

// B·∫°n ƒë∆∞·ª£c cho m·ªôt m·∫£ng g·ªìm `k` **danh s√°ch li√™n k·∫øt ƒë∆°n** (linked list), m·ªói
// danh s√°ch ƒë√£ ƒë∆∞·ª£c **s·∫Øp x·∫øp tƒÉng d·∫ßn**.
// Nhi·ªám v·ª•: **g·ªôp t·∫•t c·∫£ `k` danh s√°ch** n√†y th√†nh **m·ªôt danh s√°ch li√™n k·∫øt duy
// nh·∫•t, ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp tƒÉng d·∫ßn**.

// ---

// ### üìå V√≠ d·ª•

// **Input:**

// ```
// lists = [[1,4,5],[1,3,4],[2,6]]
// ```

// **Di·ªÖn gi·∫£i:**

// * Danh s√°ch 1: `1 -> 4 -> 5`
// * Danh s√°ch 2: `1 -> 3 -> 4`
// * Danh s√°ch 3: `2 -> 6`

// **Output:**

// ```
// 1 -> 1 -> 2 -> 3 -> 4 -> 4 -> 5 -> 6
// ```

// ---

// ### üìå √ù t∆∞·ªüng gi·∫£i

// C√≥ nhi·ªÅu c√°ch gi·∫£i kh√°c nhau:

// #### üîπ C√°ch 1: Gom t·∫•t c·∫£ ph·∫ßn t·ª≠ ‚Üí s·∫Øp x·∫øp ‚Üí t·∫°o l·∫°i linked list

// * Duy·ªát t·∫•t c·∫£ c√°c node trong `k` danh s√°ch.
// * ƒê∆∞a gi√° tr·ªã v√†o m·ªôt m·∫£ng.
// * Sort m·∫£ng.
// * T·∫°o l·∫°i linked list theo th·ª© t·ª±.
// * **ƒê·ªô ph·ª©c t·∫°p:** `O(N log N)` (v·ªõi `N` = t·ªïng s·ªë node).

// ---

// #### üîπ C√°ch 2: D√πng **min-heap (priority queue)**

// * √ù t∆∞·ªüng gi·ªëng **merge k m·∫£ng ƒë√£ s·∫Øp x·∫øp**.
// * D√πng `priority queue` (min-heap) ƒë·ªÉ lu√¥n l·∫•y ra node nh·ªè nh·∫•t hi·ªán t·∫°i
// trong c√°c danh s√°ch.
// * G·∫Øn node ƒë√≥ v√†o k·∫øt qu·∫£, r·ªìi ƒë∆∞a node ti·∫øp theo c·ªßa danh s√°ch ƒë√≥ v√†o heap.
// * **ƒê·ªô ph·ª©c t·∫°p:** `O(N log k)`

// * `N`: t·ªïng s·ªë node.
// * `k`: s·ªë danh s√°ch.

// üëâ ƒê√¢y l√† c√°ch t·ªëi ∆∞u th∆∞·ªùng d√πng.

// ---

// #### üîπ C√°ch 3: Chia ƒë·ªÉ tr·ªã (Divide & Conquer)

// * T∆∞∆°ng t·ª± nh∆∞ merge sort.
// * Gh√©p ƒë√¥i danh s√°ch: merge 2 list m·ªôt l√∫c ‚Üí l·∫∑p l·∫°i cho ƒë·∫øn khi c√≤n 1 list.
// * **ƒê·ªô ph·ª©c t·∫°p:** `O(N log k)`.

// ---

// ### üìå ƒêi·ªÉm m·∫•u ch·ªët

// * B√†i n√†y l√† **m·ªü r·ªông c·ªßa Merge 2 Sorted Lists (LeetCode 21)**.
// * D√πng heap ho·∫∑c chia ƒë·ªÉ tr·ªã l√† c√°ch t·ªët nh·∫•t ƒë·ªÉ ƒë·∫°t hi·ªáu su·∫•t cao.

// ---

// B·∫°n c√≥ mu·ªën m√¨nh vi·∫øt lu√¥n **code Java b·∫±ng PriorityQueue** ƒë·ªÉ th·∫•y r√µ c√°ch
// tri·ªÉn khai kh√¥ng?
