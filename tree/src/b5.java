
// 19. Remove Nth Node From End of List
import java.util.*;

// ƒê·ªãnh nghƒ©a node c·ªßa Linked List

public class b5 {
    static Scanner sc = new Scanner(System.in);

    public static void main(String[] args) {

        int nNodes = sc.nextInt();
        int[] arr = new int[nNodes];
        for (int i = 0; i < nNodes; i++) {
            arr[i] = sc.nextInt();
        }

        int n = sc.nextInt();

        // X√¢y d·ª±ng linked list t·ª´ m·∫£ng
        ListNode head = buildLinkedList(arr);

        // G·ªçi h√†m x√≥a node
        head = removeNthFromEnd(head, n);

        // In danh s√°ch k·∫øt qu·∫£ d·∫°ng [1,2,3,5]
        printLinkedList(head);

        sc.close();
    }

    // H√†m x√¢y d·ª±ng linked list t·ª´ m·∫£ng
    public static ListNode buildLinkedList(int[] arr) {
        if (arr.length == 0)
            return null;

        ListNode head = new ListNode(arr[0]); // node ƒë·∫ßu ti√™n
        ListNode curr = head;

        // N·ªëi c√°c node c√≤n l·∫°i
        for (int i = 1; i < arr.length; i++) {
            curr.next = new ListNode(arr[i]);
            curr = curr.next;
        }
        return head;
    }

    // H√†m in linked list d·∫°ng [1,2,3,5]
    public static void printLinkedList(ListNode head) {
        List<Integer> list = new ArrayList<>();
        ListNode curr = head;
        while (curr != null) {
            list.add(curr.val);
            curr = curr.next;
        }
        System.out.println(list);
    }

    static class ListNode {
        int val;
        ListNode next;

        ListNode(int val) {
            this.val = val;
        }

        ListNode(int val, ListNode next) {
            this.val = val;
            this.next = next;
        }
    }

    public static ListNode removeNthFromEnd(ListNode head, int n) {
        // T·∫°o dummy node (gi√∫p x·ª≠ l√Ω tr∆∞·ªùng h·ª£p x√≥a node ƒë·∫ßu ti√™n)
        ListNode res = new ListNode(0, head);
        ListNode dummy = res;

        // B1: cho con tr·ªè head ch·∫°y tr∆∞·ªõc n b∆∞·ªõc
        for (int i = 0; i < n; i++) {
            head = head.next;
        }

        // B2: di chuy·ªÉn song song head v√† dummy
        // Khi head ƒë·∫øn cu·ªëi th√¨ dummy s·∫Ω ƒë·ª©ng ngay tr∆∞·ªõc node c·∫ßn x√≥a
        while (head != null) {
            head = head.next;
            dummy = dummy.next;
        }

        // B3: b·ªè qua node c·∫ßn x√≥a
        dummy.next = dummy.next.next;

        // Tr·∫£ v·ªÅ head m·ªõi (b·ªè qua dummy)
        return res.next;
    }
}

// Ok üëç m√¨nh s·∫Ω gi·∫£i th√≠ch chi ti·∫øt thu·∫≠t to√°n b·∫°n vi·∫øt trong Java nh√©.

// ---

// ### √ù t∆∞·ªüng b√†i to√°n

// Ta c·∫ßn **x√≥a node th·ª© n t·ª´ cu·ªëi danh s√°ch li√™n k·∫øt**. Thay v√¨ duy·ªát 2 l·∫ßn (1
// l·∫ßn ƒë·∫øm ƒë·ªô d√†i, 1 l·∫ßn t√¨m v·ªã tr√≠), ta d√πng **2 con tr·ªè (two pointers)** ƒë·ªÉ
// l√†m trong 1 l·∫ßn duy·ªát.

// ---

// ### Code v√† gi·∫£i th√≠ch t·ª´ng b∆∞·ªõc

// ```java
// class Solution {
// public ListNode removeNthFromEnd(ListNode head, int n) {
// // T·∫°o dummy node ƒë·ªÉ tr√°nh case x√≥a head
// ListNode res = new ListNode(0, head);
// ListNode dummy = res;

// // B1: cho con tr·ªè head ch·∫°y tr∆∞·ªõc n b∆∞·ªõc
// // Sau v√≤ng for, kho·∫£ng c√°ch gi·ªØa head v√† dummy l√† n
// for (int i = 0; i < n; i++) {
// head = head.next;
// }

// // B2: di chuy·ªÉn song song head v√† dummy
// // Khi head ch·∫°y ƒë·∫øn cu·ªëi (null), dummy s·∫Ω ƒë·ª©ng ngay tr∆∞·ªõc node c·∫ßn x√≥a
// while (head != null) {
// head = head.next;
// dummy = dummy.next;
// }

// // B3: x√≥a node th·ª© n t·ª´ cu·ªëi b·∫±ng c√°ch b·ªè qua dummy.next
// dummy.next = dummy.next.next;

// // Tr·∫£ v·ªÅ danh s√°ch m·ªõi, b·ªè qua dummy node
// return res.next;
// }
// }
// ```

// ---

// ### V√≠ d·ª• minh h·ªça

// Input: `head = [1,2,3,4,5], n = 2`
// M·ª•c ti√™u: x√≥a node c√≥ gi√° tr·ªã `4`.

// 1. Sau khi ch·∫°y `for`, con tr·ªè `head` ƒë·ª©ng ·ªü node `3` (c√°ch `dummy` **2
// b∆∞·ªõc**).
// 2. Ti·∫øp t·ª•c `while` cho ƒë·∫øn khi `head = null`:

// * `dummy` di chuy·ªÉn t·ª´ node `0(dummy)` ‚Üí `1` ‚Üí `2` ‚Üí `3`.
// 3. L√∫c n√†y `dummy` ƒëang ·ªü node `3`, ngay tr∆∞·ªõc node `4` c·∫ßn x√≥a.
// 4. C·∫≠p nh·∫≠t `dummy.next = dummy.next.next` ‚Üí b·ªè qua node `4`.

// K·∫øt qu·∫£: `[1,2,3,5]`.

// ---

// üëâ Thu·∫≠t to√°n n√†y ch·ªâ duy·ªát **1 l·∫ßn qua list** ‚Üí ƒë·ªô ph·ª©c t·∫°p **O(L)** v·ªõi `L`
// l√† s·ªë node.
// üëâ D√πng dummy node ƒë·ªÉ tr√°nh x·ª≠ l√Ω ri√™ng tr∆∞·ªùng h·ª£p x√≥a node ƒë·∫ßu ti√™n.

// ---

// B·∫°n c√≥ mu·ªën m√¨nh v·∫Ω s∆° ƒë·ªì **con tr·ªè di chuy·ªÉn (head v√† dummy)** qua t·ª´ng b∆∞·ªõc
// ƒë·ªÉ d·ªÖ h√¨nh dung h∆°n kh√¥ng?
